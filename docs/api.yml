openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22047
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
  - name: Visitors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Retrieve a list of all books in the library, optionally filtered by bookName and releaseDate range. Supports pagination.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'
        - in: query
          name: bookName
          description: Filter by book name
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: Minimum release date
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateMax
          description: Maximum release date
          schema:
            type: string
            format: date
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400' 
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdatedBook'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400' 
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'

  /books/availability:
    get:
      tags:
        - Books
      summary: Get all books with availability status
      description: Retrieve a list of all books in the library with their availability status.
      operationId: getBooksAvailability
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400' 
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'

  /books/authors:
    put:
      tags:
        - Books
      summary: created all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooksAndAuthors
      requestBody:
        description: created or updated book with author in request body the id
        content:
          application/json:
            schema:
              type: array
              items:
                properties:
                  bookId:
                    type: string
                  authorsId:
                    type: string
          
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400' 
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'

  /books/{bookId}/authors/{authorsId}:
    put:
      tags:
        - Books
      summary: created and updated a book
      description: The returned books are ordered by updated datetime.
      operationId: getBookIdAndAuthorsId
      parameters:
        - in: path
          name: bookId
          description: Filter return books
          required: true
          schema:
            type: string

        - in: path
          name:  authorsId  
          description: filter books
          schema:
            type: string
          required: true  

      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400' 
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'

  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Retrieve a list of all authors in the library, optionally filtered by authorName. Supports pagination.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter by author name
          schema:
            type: string
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400' 
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
    
    delete:
      tags:
        - Authors
      summary: delete author
      description: delete author by ID 
      operationId: deleteAuthor
      parameters:
        - name: AuthorName
          in: query
          description: The name that needs to be delete
          required: true
          schema: 
            type: string
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400' 
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
  /books/import:
    post:
      tags:
        - Books
      summary: Import books
      operationId: importBooks
      requestBody:
        description: Excel or JSON file containing book information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
       
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'

  /authors/import:
    post:
      tags:
        - Authors
      summary: Import authors
      operationId: importAuthors
      requestBody:
        description: Excel or JSON file containing author information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'

  /visitors:
    get: 
      tags:
        - Visitors
      summary: Get all Visitors
      description: Retrieve a list of all Visitors in the library.
      operationId: getVisitors
      parameters:
        - in: query
          name: VisitorsName
          description: Filter by Visitors name
          schema:
            type: string
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400: 
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'

    post: 
      tags:
        - Visitors
      summary: Create a Visitor
      operationId: createdVisitior
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                id: 
                  type: string
                name: 
                  type: string
                reference:
                  type: string
              required:
                - id
                - name
                - reference

      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'

  /visitors/{visitorId}/borrowed-books:
    get:
      tags:
        - Visitors
      summary: Get books borrowed by a visitor
      description: Retrieve a list of books borrowed by a specific visitor.
      operationId: getBorrowedBooks
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400' 
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'

  /visitors/{visitorId}/borrowed-books/{bookId}:
    put:
      tags:
        - Visitors
      summary: Borrow a book
      description: Borrow a book for a specific visitor.
      operationId: borrowBook
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor
          required: true
          schema:
            type: string
        - in: path
          name: bookId
          description: ID of the book to borrow
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400' 
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'

    delete:
      tags:
        - Visitors
      summary: Return a borrowed book
      description: Return a borrowed book for a specific visitor.
      operationId: returnBook
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor
          required: true
          schema:
            type: string
        - in: path
          name: bookId
          description: ID of the book to return
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400' 
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'

  /visitors/{visitorId}/activities:
    get:
      tags:
        - Visitors
      summary: Get visitor activities
      description: Retrieve a list of books borrowed and returned by a specific visitor.
      operationId: getVisitorActivities
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400' 
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'

components:
  schemas:
    CrupdatedBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer

        releaseDate:
          type: string
          format: date  
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdatedBook"
      properties:
        author:
          $ref:
            '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id: 
          type: string
        name: 
          type: string
        sex: 
          type: string
          enum:
            - M
            - F
    Visitors: 
      type: object
      properties:
        id:
          type: string
        name: 
          type: string
        reference:
          type: string

    Status:
      type: object
      properties:
        statusCode:
          type: integer
          description: Status code of the response
        message:
          type: string
          description: Message associated with the status code

    Body:
      type: object
      properties:
        property:
          type: string
          description: Value of the property in the response body

    Responses:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        body:
          $ref: '#/components/schemas/Body'

  responses:
    Response200:
      description: Successful operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Responses'
              - $ref: '#/components/responses/Response200'

    Response400:
        description: Bad Request
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Responses'
                - $ref: '#/components/responses/Response400' 

    Response403:
      description: Forbidden
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Responses'
              - $ref: '#/components/responses/Response403'
    
    Response500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Responses'
              - $ref: '#/components/responses/Response500'

  parameters:
    queryPagination:
      in: query
      name: page
      description: Page number
      required: false
      schema:
        type: integer
        default: 1

    pathPagination:
      in: query
      name: pageSize
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 50

    
      