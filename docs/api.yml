openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22047
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: page 
          description: "Min Page number for pagination"
          required: true
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: "Max Page number for pagination"
          required: true
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdatedBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/authors:
    put:
      tags:
        - Books
      summary: created all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooksAndAuthors
      requestBody:
        description: created or updated book with author in request body the id
        content:
          application/json:
            schema:
              type: array
              items:
                properties:
                  bookId:
                    type: string
                  authorsId:
                    type: string
          
      responses:
        200:
          description: Returned  list of  books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/{bookId}/authors/{authorsId}:
    put:
      tags:
        - Books
      summary: created and updated a book
      description: The returned books are ordered by updated datetime.
      operationId: getBookIdAndAuthorsId
      parameters:
        - in: path
          name: bookId
          description: Filter return books
          required: true
          schema:
            type: string

        - in: path
          name:  authorsId  
          description: filter books
          schema:
            type: string
          required: true  

      responses:
        200:
          description: Returned  list of  books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Retrieve a list of all authors in the library, optionally filtered by authorName. Supports pagination.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter by author name
          schema:
            type: string
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'
      responses:
        200:
          description: List of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    
    delete:
      tags:
        - Authors
      summary: delete author
      description: delete author by ID 
      operationId: deleteAuthor
      parameters:
        - name: AuthorName
          in: query
          description: The name that needs to be delete
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Author'

components:
  schemas:
    CrupdatedBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer

        releaseDate:
          type: string
          format: date  
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdatedBook"
      properties:
        author:
          $ref:
            '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id: 
          type: string
        name: 
          type: string
        sex: 
          type: string
          enum:
            - M
            - F

  parameters:
    queryPagination:
      in: query
      name: page
      description: Page number
      required: false
      schema:
        type: integer
        default: 1

    pathPagination:
      in: query
      name: pageSize
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 50