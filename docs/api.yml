openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22047
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
  - name: Topics
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDate
          description: Filter return books by intervals of date of the releaseDate.
          required: true
          schema: 
            type: string 
        - in: query
          name: page 
          description: "Min Page number for pagination"
          required: true
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: "Max Page number for pagination"
          required: true
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdatedBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/authors:
    put:
      tags:
        - Books
      summary: created all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooksAndAuthors
      requestBody:
        description: created or updated book with author in request body the id
        content:
          application/json:
            schema:
              type: array
              items:
                properties:
                  bookId:
                    type: string
                  authorsId:
                    type: string
          
      responses:
        200:
          description: Returned  list of  books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/{bookId}/authors/{authorsId}:
    put:
      tags:
        - Books
      summary: created and updated a book
      description: The returned books are ordered by updated datetime.
      operationId: getBookIdAndAuthorsId
      parameters:
        - in: path
          name: bookId
          description: Filter return books
          required: true
          schema:
            type: string

        - in: path
          name:  authorsId  
          description: filter books
          schema:
            type: string
          required: true  

      responses:
        200:
          description: Returned  list of  books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/topics:
    put:
      tags:
        - Books
      summary: created all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooksAndTopics
      requestBody:
        description: created or updated book with topics in request body the id
        content:
          application/json:
            schema:
              type: array
              items:
                properties:
                  bookId:
                    type: string
                  topicsId:
                    type: string
          
      responses:
        200:
          description: Returned  list of  books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/{bookId}/topics/{topicsId}:
    put:
      tags:
        - Books
      summary: created and updated a book
      description: The returned books are ordered by updated datetime.
      operationId: getBookIdAndTopicsId
      parameters:
        - in: path
          name: bookId
          description: Filter return books
          required: true
          schema:
            type: string

        - in: path
          name:  topicsId 
          description: filter books
          schema:
            type: string
          required: true  

      responses:
        200:
          description: Returned  list of  books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: The returned author are ordered by name.
      operationId: getAuthorByName
      parameters:
        - name: AuthorName
          in: query
          description: Filter author by name
          required: false
          schema:
            type: string
        - in: query
          name: page 
          description: "Min Page number for pagination"
          required: true
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: "Max Page number for pagination"
          required: true
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    
    put: 
      tags:
        - Authors
      summary: update author
      description: update author by ID
      operationId: updateAuthor
      parameters:
        - name: AuthorName
          in: query
          description: name that need to be update
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Author'
    
    delete:
      tags:
        - Authors
      summary: delete author
      description: delete author by ID 
      operationId: deleteAuthor
      parameters:
        - name: AuthorName
          in: query
          description: The name that needs to be delete
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Author'

  /topics:
    get:
      tags:
        - Topics
      summary: get Topics  
      operationId: getTopics
      description: The returned of list Topics.
      parameters:
        - in: query
          name: page 
          description: "Min Page number for pagination"
          required: true
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: "Max Page number for pagination"
          required: true
          schema:
            type: integer
            default: 50
    
      responses:
        200:
          description: The list of filtered topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topics'

    put:
      tags:
        - Topics
      summary: Create or update a list of topics
      operationId: crupdateTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Topics'
      responses:
        200:
          description: The list of created or updated Topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topics'

    delete:
      tags:
        - Topics
      summary: Removed a list of topics
      operationId: removeTopics
      parameters:
        - in: query
          name: id
          description: removed topics by id
          required: false
          schema:
            type: string

      responses:
        200:
          description: The list of removed topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topics'

components:
  schemas:
    CrupdatedBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer

        releaseDate:
          type: string
          format: date  
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdatedBook"
      properties:
        Author:
          $ref: "#/components/schemas/Author"
        Topics:
          $ref: "#/components/schemas/Topics"   
      
      
    Author: 
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          type: string
          enum:
            - M
            - F  
  
    Topics:
          type: object
          properties:
            id:
              type: string
            topicsName:
              type: string